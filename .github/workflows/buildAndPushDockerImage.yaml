name: Build And Push Docker Image

on:
  push:
    branches:
      - infra/action-#19 # develop으로 수정해야 함
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # AdoptOpenJDK의 후속인 Temurin 사용

      # 환경 변수 파일 생성
      - name: Set environment values for main application
        run: |
          cd ./src/main/resources
          touch ./env.docker
          echo "${{ secrets.ENV }}" > ./env.docker
        shell: bash

      # 3. Gradle 캐시 설정
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle에 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Gradle Build
      - name: Build Project with Gradle
        run: |
          ./gradlew clean build

      # 6. 빌드 결과 확인
      - name: Verify build artifacts
        run: ls -al build/libs

      # 7. 빌드 아티팩트 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/libs/*.jar

  docker:
    runs-on: ubuntu-latest
    needs: build  # build 작업이 완료된 후 실행

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 17 설정 (Docker 빌드에 필요 시)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. 빌드 아티팩트 다운로드
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/libs

      # 4. Docker 설치 및 빌드 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. Docker 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t your-dockerhub-username/provocation-springboot-container:latest .
          docker images | grep provocation-springboot-container

      # 7. Docker 이미지 푸시
      - name: Push Docker image
        run: |
          docker push your-dockerhub-username/provocation-springboot-container:latest
          echo "Docker image pushed successfully to Docker Hub."